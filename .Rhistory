jags <- jags.model(textConnection(mod),
data = data,
n.chains = 4, # number of parallele chains
n.adapt = 5000, #burnin
inits = function ()
{
list(  "alpha" = rnorm(0, .0001),
"beta_0" = rnorm(0, .0001),
"beta_1"= rnorm(0, .0001),
"tau" = rnorm(0, .0001))
})
source('~/stat bayÃ©sienne/projet/BayesProject.R', echo=TRUE)
mu = c()
for (i in 1:length(x)){
mu[i] =  exp(beta_0+alpha*z[i]+(beta_1+tau*z[i])*(x[i]-39))
}
M=length(x)
alpha <- rep(0,M)
beta_0 <- rep(0,M)
beta_1 <- rep(0,M)
tau <- rep(0,M)
mu = c()
for (i in 1:length(x)){
mu[i] =  exp(beta_0+alpha*z[i]+(beta_1+tau*z[i])*(x[i]-39))
}
mod= "model{
for (i in 1:length(x)){
y[i] ~ dpois(mu[i])
mu[i] = exp(beta_0+alpha*z[i]+(beta_1+tau*z[i])*(x[i]-39))
}
# specify the priors (uninformative here)
alpha ~ dnorm(0, .0001)
beta_0 ~ dnorm(0, .0001)
beta_1 ~ dnorm(0, .0001)
tau ~ dnorm(0, .0001)
}"
set.seed(1348)
colnames(absences)= c('y','z','x')
data = as.list(absences)
param=c("alpha","beta_0","beta_1","tau")
jags <- jags.model(textConnection(mod),
data = data,
n.chains = 4, # number of parallele chains
n.adapt = 5000, #burnin
inits = function ()
{
list(  "alpha" = rnorm(0, .0001),
"beta_0" = rnorm(0, .0001),
"beta_1"= rnorm(0, .0001),
"tau" = rnorm(0, .0001))
})
update(jags, 10000)
samples <- coda.samples(jags,
param,
100)
apply(samples[[1]],2,mean)
geweke.diag(samples[[1]], frac1=0.1, frac2=0.5)
heidel.diag(samples[[1]])
jags <- jags.model(textConnection(mod),
data = data,
n.chains = 4, # number of parallele chains
n.adapt = 1000, #burnin
inits = function ()
{
list(  "alpha" = rnorm(0, .0001),
"beta_0" = rnorm(0, .0001),
"beta_1"= rnorm(0, .0001),
"tau" = rnorm(0, .0001))
})
update(jags, 10000)
samples <- coda.samples(jags,
param,
10000)
apply(samples[[1]],2,mean)
heidel.diag(samples[[1]])
autocorr.diag(samples)
jags <- jags.model(textConnection(mod),
data = data,
n.chains = 4, # number of parallele chains
n.adapt = 1000)
update(jags, 10000)
samples <- coda.samples(jags,
param,
10000)
apply(samples[[1]],2,mean)
jags <- jags.model(textConnection(mod),
data = data,
n.chains = 4, # number of parallele chains
n.adapt = 1000)
update(jags, 10000)
samples <- coda.samples(jags,
param,
10000)
apply(samples[[1]],2,mean)
jags <- jags.model(textConnection(mod),
data = data,
n.chains = 4, # number of parallele chains
n.adapt = 1000)
update(jags, 10000)
samples <- coda.samples(jags,
param,
10000)
apply(samples[[1]],2,mean)
dic
dic.samples(jags,n.iter = 1000)
